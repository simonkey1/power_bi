---
title: "‚ö°  An√°lisis en Tiempo Real del Suministro El√©ctrico de Chile ‚ö°"
pubDate: 2025-02-12
description: "Un tutorial de c√≥mo extraer datos con **Playwright**, procesarlos con **Pandas** y visualizar en **PowerBI**."
author: "Simon Gomez"
format: 
  html:
    code-fold: true
    code-overflow: scroll
    theme: cerulean
    toc: True
    
---

## Introducci√≥n

Hace poco descubr√≠ la p√°gina de la Superintendecia de Electricidad y Combustibles (SEC). Me llam√≥ la atenci√≥n en particular su secci√≥n de m√©tricas e informaci√≥n de los cortes de luz a nivel nacional, debido a que not√© que hay un gran margen de mejora en su accesibilidad y visualizaci√≥n de los datos para el usuario. NOTA: Al principio de la p√°gina, en la esquina superior derecha hay un interruptor para cambiar entre modo claro/oscuro, recomiendo el segundo, saludos!



## ¬øQu√© haremos?

1.  **Preparar nuestro entorno**: primero, instalaremos las dependencias necesarias para el proyecto.

2.  **Extracci√≥n de los datos**: aprenderemos a realizar web scraping con Playwright.

3.  **Transformaci√≥n de los datos**: necesitaremos limpiar y procesar los datos extra√≠dos con Pandas.

4.  **Visualizaci√≥n de los datos**: finalmente, visualizaremos los datos en Powerbi.

![Flujo de Trabajo Te√≥rico](/images/flow.png)

Como se√±ala el flujo, empezamos por la Api de la SEC a trav√©s de python, luego pasamos a powerbi para terminar las trasnformaci√≥n y la posterior visualizaci√≥n

## Aclaraci√≥n üî¥

Si bien creamos una base hist√≥rica, esta es parte de otro proyecto independiente, donde tendremos un enfoque diferente con visualizaciones propias. Mantuve el flujo original ya que igualmente lo utilizaremos para una medida, adem√°s que nos ir√° acumulando los datos desde el momento que empezamos la iteraci√≥n. De todas maneras, si deseas no utilizar esta base, basta con eliminar la parte del c√≥digo donde la creamos.

## Entorno de Desarrollo

Para este proyecto, necesitaremos instalar las siguientes dependencias: Playwright, Pandas y Powerbi.

Les recomiendo crear un entorno virtual para instalar las dependencias. Para ello, decidan un directorio donde quieran crear el entorno virtual y ejecuten el siguiente comando en la terminal:

``` python

    python -m venv "nombre-del-entorno"-env


```

Una vez creado el entorno virtual, act√≠venlo con el siguiente comando:

``` bash

    source "nombre-del-entorno"-env/bin/activate


```

Ahora, instalemos las dependencias necesarias:

``` bash

    pip install playwright pandas
    
```

## Extracci√≥n de los Datos

Primero, necesitamos importar las librer√≠as necesarias:

``` python

    from playwright.sync_api import sync_playwright
    import pandas as pd
```

# üöÄ Instalar Dependencias

Con el entorno virtual activado, instalemos las librer√≠as necesarias:

``` bash

    pip install playwright pandas
    
```

Adem√°s, debemos instalar los navegadores de Playwright:

``` bash

    playwright install

```

------------------------------------------------------------------------

## üîç Extracci√≥n de Datos con Playwright

Usaremos **Playwright** para interceptar las respuestas de la API de la SEC.

### üìå Importaci√≥n de Librer√≠as

``` python
from playwright.sync_api import sync_playwright
import pandas as pd
import os
import time
import re
from datetime import datetime, timedelta
```

------------------------------------------------------------------------

## üìÇ Definici√≥n de Archivos de Salida

Guardaremos los datos en dos archivos CSV:

-   **`clientes_afectados_tiempo_real.csv`**: Contiene los datos m√°s recientes.
-   **`clientes_afectados_historico.csv`**: Mantiene un registro hist√≥rico.

``` python
csv_tiempo_real = "clientes_afectados_tiempo_real.csv"
csv_historico = "clientes_afectados_historico.csv"
```

------------------------------------------------------------------------

# üîé An√°lisis de la Funci√≥n `intercept_responses()`

Esta funci√≥n usa **Playwright** para interceptar las respuestas de la API de la **Superintendencia de Electricidad y Combustibles de Chile (SEC)** y extraer informaci√≥n sobre cortes de luz. Luego, almacena estos datos en archivos CSV.

------------------------------------------------------------------------

## üìå **Estructura General**

1.  **Abrir un navegador en modo headless** (sin interfaz gr√°fica).
2.  **Interceptar las respuestas de la API** en la p√°gina de la SEC.
3.  **Extraer informaci√≥n clave** de los datos JSON recibidos.
4.  **Procesar los datos** para calcular tiempos y crear identificadores √∫nicos.
5.  **Guardar la informaci√≥n en archivos CSV**.
6.  **Cerrar el navegador** una vez completado el proceso.



------------------------------------------------------------------------

## üõ† **Paso a Paso de la Funci√≥n**

### 1Ô∏è‚É£ **Inicializar Playwright y Abrir el Navegador**

Se utiliza `sync_playwright()` para iniciar Playwright y lanzar un navegador **Chromium** en modo **headless** (sin interfaz gr√°fica).

``` python
with sync_playwright() as p:
    browser = p.chromium.launch(headless=True)  # Lanzar navegador en modo headless
    page = browser.new_page()
```

üìå **¬øQu√© hace esto?**

-   Crea una instancia de Playwright.
-   Lanza un navegador Chromium sin interfaz visual.
-   Crea una nueva p√°gina en ese navegador.

------------------------------------------------------------------------

### 2Ô∏è‚É£ **Definir una Lista para Almacenar Registros**

``` python
registros = []  # Lista para almacenar datos nuevos
```

üìå **¬øPara qu√© sirve?**

-   Aqu√≠ se guardar√°n los datos extra√≠dos de la API antes de escribirlos en los archivos CSV.

------------------------------------------------------------------------

### 3Ô∏è‚É£ **Interceptar las Respuestas de la API**

``` python
def handle_response(response):
    if "GetPorFecha" in response.url:
        try:
            data = response.json()
            timestamp_actual = datetime.now()  # Tiempo de consulta
```

üìå **¬øQu√© hace esto?**

-   **Verifica si la URL de la respuesta contiene `"GetPorFecha"`**, lo que indica que es una respuesta de la API relevante.
-   **Convierte la respuesta en JSON** (`response.json()`).
-   **Guarda el timestamp actual** para identificar cu√°ndo se hizo la consulta.

------------------------------------------------------------------------

### 4Ô∏è‚É£ **Procesar los Datos Extra√≠dos**

``` python
for entry in data:
    actualizado_hace = entry.get("ACTUALIZADO_HACE", "")
    minutos_atras = 0

    match = re.search(r'(\d+)\s+Minutos', actualizado_hace)
    if match:
        minutos_atras = int(match.group(1))  # Extrae el n√∫mero antes de "Minutos"

    hora_exacta_reporte = timestamp_actual - timedelta(minutes=minutos_atras)
```

üìå **¬øQu√© hace esto?**

-   **Extrae el campo `"ACTUALIZADO_HACE"`**, que indica hace cu√°nto tiempo se actualiz√≥ la informaci√≥n.
-   **Usa una expresi√≥n regular (`re.search`) para extraer los minutos** mencionados en `"ACTUALIZADO_HACE"`.
-   **Calcula la hora exacta del reporte**, restando esos minutos del timestamp actual.

------------------------------------------------------------------------

### 5Ô∏è‚É£ **Crear un Identificador √önico para Cada Registro**

``` python
unique_id = f"{entry.get('FECHA_INT_STR', '')}-{entry.get('REGION', '')}-{entry.get('COMUNA', '')}-{entry.get('EMPRESA', '')}-{entry.get('CLIENTES_AFECTADOS', 0)}-{hora_exacta_reporte.strftime('%Y-%m-%d %H:%M:%S')}"
```

üìå **¬øPor qu√© es importante esto?**

-   **Evita la duplicaci√≥n de datos**, asegurando que cada registro tenga un ID √∫nico.
-   **Facilita la organizaci√≥n** en los archivos CSV.

------------------------------------------------------------------------

### 6Ô∏è‚É£ **Guardar los Datos en la Lista `registros`**

``` python
registros.append({
    "ID_UNICO": unique_id,
    "TIMESTAMP": timestamp_actual.strftime("%Y-%m-%d %H:%M:%S"),
    "HORA_EXACTA_REPORTE": hora_exacta_reporte.strftime("%Y-%m-%d %H:%M:%S"),
    "FECHA": entry.get("FECHA_INT_STR", ""),
    "REGION": entry.get("NOMBRE_REGION", ""),
    "COMUNA": entry.get("NOMBRE_COMUNA", ""),
    "EMPRESA": entry.get("NOMBRE_EMPRESA", ""),
    "CLIENTES_AFECTADOS": entry.get("CLIENTES_AFECTADOS", 0),
    "ACTUALIZADO_HACE": actualizado_hace
})
```

üìå **¬øQu√© hace esto?**

-   **Guarda cada registro como un diccionario** dentro de la lista `registros`.
-   **Almacena los datos clave** como fecha, regi√≥n, comuna, empresa y clientes afectados.

------------------------------------------------------------------------

### 7Ô∏è‚É£ **Capturar las Respuestas de la API**

``` python
page.on("response", handle_response)
```

üìå **¬øQu√© hace esto?**

-   **Asocia la funci√≥n `handle_response` con cada respuesta de la p√°gina**.
-   **Intercepta las respuestas en segundo plano** mientras se carga la web.

------------------------------------------------------------------------

### 8Ô∏è‚É£ **Acceder a la P√°gina de la SEC**

``` python
page.goto("https://apps.sec.cl/INTONLINEv1/index.aspx")
page.wait_for_timeout(5000)  # Espera para capturar datos
```

üìå **¬øQu√© hace esto?**

-   **Abre la p√°gina de la SEC en el navegador**.
-   **Espera 5 segundos** para permitir la carga de datos.

------------------------------------------------------------------------

### 9Ô∏è‚É£ **Cerrar el Navegador**

``` python
browser.close()
```

üìå **¬øPor qu√© es importante?**

-   **Libera recursos del sistema**.
-   **Evita que el script consuma demasiada memoria**.

------------------------------------------------------------------------

## üìä **Guardado de Datos en CSV**

``` python
if registros:
    df_new = pd.DataFrame(registros)

    # üìå Guardar en CSV hist√≥rico
    if os.path.exists(csv_historico):
        df_historico = pd.read_csv(csv_historico, encoding="utf-8-sig")
        df_historico = pd.concat([df_historico, df_new]).drop_duplicates(subset=["ID_UNICO"], keep="first")
    else:
        df_historico = df_new

    df_historico.to_csv(csv_historico, index=False, encoding="utf-8-sig")

    # üìå Guardar en CSV de Tiempo Real
    df_new.to_csv(csv_tiempo_real, index=False, encoding="utf-8-sig")

    print(f"‚úÖ Datos guardados en:\nüìå {csv_historico} (Hist√≥rico)\nüìå {csv_tiempo_real} (Tiempo Real)")
```

üìå **¬øQu√© hace esto?**

-   **Convierte los registros en un DataFrame de Pandas**.
-   **Guarda los datos en CSV hist√≥rico y de tiempo real**.
-   **Evita duplicados bas√°ndose en el ID √∫nico**.

------------------------------------------------------------------------

## üîÅ **Automatizaci√≥n Cada 5 Minutos**

``` python
while True:
    intercept_responses()
    print("‚è≥ Esperando 5 minutos para la siguiente ejecuci√≥n...\n")
    time.sleep(5 * 60)  # 5 minutos en segundos
```

üìå **¬øQu√© hace esto?**

-   **Ejecuta `intercept_responses()` en un bucle infinito**.
-   **Espera 5 minutos (`time.sleep(5 * 60)`) antes de volver a ejecutar la funci√≥n**.

Puedes elegir el tiempo que desees, yo decid√≠ 5 minutos. 

## Extra

Esta es una manera de automatizar, no obstante, tambi√©n puedes utilizar el programador de tareas en Windows y ejecutar un .bat que contenga la ejecuci√≥n del .py. Si lo ejecutas, no es necesario mantener el c√≥digo de loop de arriba, ya que el programador lo puedes configurar con intervalos de tiempo.


```bash
@echo off
cd C:\Users\SIMON\Desktop\Kaggle\luz
python end.py
exit

```


### Felicidades‚≠ê!
Ya tenemos nuestra base de datos casi lista para su visualizaci√≥n. Si bien podr√≠amos terminar de darle formato a los datos directamente con pandas, es una perfecta ocasi√≥n para hacerlo en powerbi, ya que podremos visualizar con facilidad los cambios que iremos realizando para construir nuestro dashboard interactivo. 

### Aclaraci√≥n üî¥
Este no es un tutorial de c√≥mo utilizar PowerBI, por lo que es necesario saber lo b√°sico para poder seguir el tutorial: instalaci√≥n, configuraci√≥n, comandos, etc. 

#  Powerbi: transformaci√≥n y Visualizaci√≥n de los datos 
Dependiendo de la carpeta donde hayamos realizado nuestro proyecto, podremos encontrar el archivo resultante, el cual utilizaremos ahora.

Para poder manipular nuestros datos en Powerbi hay que seguir estos sencillos pasos:

- **Abrir PowerBI**


- **Click en Get data from other sources**

![Captura de pantalla: Seleccionar la opci√≥n Text/CSV en PowerBI para importar datos](images/get_data.png)


- **Seleccionamos Text/CSV**

![Explorador de archivos: Ubicar el archivo .csv de datos](images/select_csv.png)


- **Buscamos nuestro archivo .csv**


![Explorador de archivos: Ubicar el archivo .csv de datos](images/Text_csv.png)


- **Click en Load**

![Bot√≥n Load: Confirmaci√≥n de carga del archivo .csv en PowerBI](images/load_data.png)

A continuaci√≥n explicar√©  paso a paso el c√≥digo M que utilizamos para transformar datos en Power Query. Este script carga nuestro archivo CSV, promociona los encabezados, cambia los tipos de datos, agrega una columna personalizada concatenando un texto fijo con el valor existente en la columna **REGION**, y aplica una serie de reemplazos para corregir los nombres de las regiones de forma automatizada.


- **En la secci√≥n Home click en Advanced Editor**

![Bot√≥n Done en el Advanced Editor de Power Query para confirmar los cambios](images/Advance_editor.png)

- **Copia y pega el c√≥digo de m√°s abajo**

- **Click en Done**

![Vista detallada del c√≥digo M utilizado para transformar datos en Power Query](images/Code_M.png)

# C√≥digo M

```m
let
    // Cargar archivo CSV y promover encabezados
    Source = Csv.Document(
        File.Contents("C:\Users\SIMON\Desktop\Kaggle\luz\power_bi\clientes_afectados_tiempo_real.csv"),
        [Delimiter=",", Columns=9, Encoding=65001, QuoteStyle=QuoteStyle.None]
    ),
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    
    // Cambiar tipos de datos
    #"Changed Type" = Table.TransformColumnTypes(
        #"Promoted Headers",
        {
            {"ID_UNICO", type text}, 
            {"TIMESTAMP", type datetime}, 
            {"HORA_EXACTA_REPORTE", type datetime}, 
            {"FECHA", type date}, 
            {"REGION", type text}, 
            {"COMUNA", type text}, 
            {"EMPRESA", type text}, 
            {"CLIENTES_AFECTADOS", Int64.Type}, 
            {"ACTUALIZADO_HACE", type text}
        }
    ),
    
    // Agregar columna REGION_CORREGIDA concatenando "Regi√≥n de " con el valor de REGION
    #"Added Custom" = Table.AddColumn(
        #"Changed Type",
        "REGION_CORREGIDA",
        each "Regi√≥n de " & [REGION]
    ),
    
    // Lista de reemplazos para la columna REGION_CORREGIDA
    Reemplazos = {
        {"Regi√≥n de Metropolitana", "Regi√≥n Metropolitana de Santiago"},
        {"Regi√≥n de Tarapaca", "Regi√≥n de Tarapac√°"},
        {"Regi√≥n de Magallanes", "Regi√≥n de Magallanes y Ant√°rtica Chilena"},
        {"Regi√≥n de Ays√©n", "Regi√≥n de Ays√©n del Gral.Iba√±ez del Campo"},
        {"Regi√≥n de O`Higgins", "Regi√≥n del Libertador Bernardo O'Higgins"},
        {"Regi√≥n de Biobio", "Regi√≥n del B√≠o-B√≠o"},
        {"Regi√≥n de La Araucania", "Regi√≥n de La Araucan√≠a"},
        {"Regi√≥n de Los Rios", "Regi√≥n de los R√≠os"},
        {"Regi√≥n de Valparaiso", "Regi√≥n de Valpara√≠so"},
        {"Regi√≥n de Maule", "Regi√≥n del Maule"}
    },

    // Aplicar reemplazos a REGION_CORREGIDA de forma acumulativa
    Resultado = List.Accumulate(
        Reemplazos,
        #"Added Custom",
        (tabla, par) => Table.ReplaceValue(
            tabla,
            par{0},
            par{1},
            Replacer.ReplaceText,
            {"REGION_CORREGIDA"}
        )
    )
in
    Resultado
```







## Explicaci√≥n del c√≥digo M 


A continuaci√≥n, desglosamos cada parte del c√≥digo para comprender su funcionamiento.


---

## üìå Cargar el Archivo CSV y Promover Encabezados

```m
Source = Csv.Document(
    File.Contents("C:\Users\SIMON\Desktop\Kaggle\luz\power_bi\clientes_afectados_tiempo_real.csv"),
    [Delimiter=",", Columns=9, Encoding=65001, QuoteStyle=QuoteStyle.None]
),
#"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true])
```

**¬øQu√© hace esto?**

- **Csv.Document & File.Contents:** Carga el archivo CSV desde la ruta especificada.
- **Table.PromoteHeaders:** Convierte la primera fila en los nombres de columna, facilitando la manipulaci√≥n posterior.

---

## üìå Cambiar Tipos de Datos

```m
#"Changed Type" = Table.TransformColumnTypes(
    #"Promoted Headers",
    {
        {"ID_UNICO", type text}, 
        {"TIMESTAMP", type datetime}, 
        {"HORA_EXACTA_REPORTE", type datetime}, 
        {"FECHA", type date}, 
        {"REGION", type text}, 
        {"COMUNA", type text}, 
        {"EMPRESA", type text}, 
        {"CLIENTES_AFECTADOS", Int64.Type}, 
        {"ACTUALIZADO_HACE", type text}
    }
)
```

**¬øQu√© hace esto?**

- Se establecen los tipos de datos adecuados para cada columna, lo que es crucial para evitar errores y asegurar que los c√°lculos o transformaciones posteriores se realicen correctamente.

---

## üìå Agregar una Columna Personalizada

```m
#"Added Custom" = Table.AddColumn(
    #"Changed Type",
    "REGION_CORREGIDA",
    each "Regi√≥n de " & [REGION]
)
```

**¬øQu√© hace esto?**

- **Table.AddColumn:** Agrega una nueva columna a la tabla.
- **"REGION_CORREGIDA":** Es el nombre de la nueva columna.
- **each "Regi√≥n de " & [REGION]:** Para cada fila, concatena el texto fijo `"Regi√≥n de "` con el valor existente en la columna **REGION**.

*Ejemplo:*  
Si el valor en **REGION** es `"Metropolitana"`, el resultado en **REGION_CORREGIDA** ser√° `"Regi√≥n de Metropolitana"`.

---

## üìå Aplicar Reemplazos de Forma Acumulativa

### Definici√≥n de la Lista de Reemplazos

```m
Reemplazos = {
    {"Regi√≥n de Metropolitana", "Regi√≥n Metropolitana de Santiago"},
    {"Regi√≥n de Tarapaca", "Regi√≥n de Tarapac√°"},
    {"Regi√≥n de Magallanes", "Regi√≥n de Magallanes y Ant√°rtica Chilena"},
    {"Regi√≥n de Ays√©n", "Regi√≥n de Ays√©n del Gral.Iba√±ez del Campo"},
    {"Regi√≥n de O`Higgins", "Regi√≥n del Libertador Bernardo O'Higgins"},
    {"Regi√≥n de Biobio", "Regi√≥n del B√≠o-B√≠o"},
    {"Regi√≥n de La Araucania", "Regi√≥n de La Araucan√≠a"},
    {"Regi√≥n de Los Rios", "Regi√≥n de los R√≠os"},
    {"Regi√≥n de Valparaiso", "Regi√≥n de Valpara√≠so"},
    {"Regi√≥n de Maule", "Regi√≥n del Maule"}
}
```

**¬øQu√© hace esto?**

- Se define una lista de pares, donde cada par contiene:
  - **Texto original:** Valor que aparece en la columna **REGION_CORREGIDA**.
  - **Texto corregido:** Valor con el que se reemplazar√° el texto original.

### Aplicaci√≥n de los Reemplazos con List.Accumulate

```m
Resultado = List.Accumulate(
    Reemplazos,
    #"Added Custom",
    (tabla, par) => Table.ReplaceValue(
        tabla,
        par{0},
        par{1},
        Replacer.ReplaceText,
        {"REGION_CORREGIDA"}
    )
)
```

**¬øQu√© hace esto?**

- **List.Accumulate:** Itera sobre cada par de la lista **Reemplazos**.
- **#"Added Custom":** Es el paso inicial que contiene la tabla con la nueva columna **REGION_CORREGIDA**.
- **Table.ReplaceValue:** En cada iteraci√≥n, reemplaza el valor **par{0}** (texto original) por **par{1}** (texto corregido) en la columna **REGION_CORREGIDA**.
- El proceso es acumulativo: cada reemplazo se aplica sobre el resultado del reemplazo anterior.

---


## Construcci√≥n de m√©tricas, el mapa interactivo, filtro y gr√°ficos


En PowerBi utilizamos una herramienta llamada medida, con esta podemos realizar c√°lculos utilizando la sintaxis adecuada, lo que permite construir m√©tricas a partir de nuestros datos

### √öltima Actualizaci√≥n

```m

√öltima Actualizaci√≥n = MAX('clientes_afectados_historico'[TIMESTAMP])   

```

Con esta medida podremos construir una *card* con la hora actual que corresponde la informaci√≥n. Esta por defecto incluye fechas, vamos a corregirlo:

- **Click en *Format Visual* en el men√∫ de la derecha**
- **General**
- ***Data Format***
- **en *Format option* buscaremos el formato *long Time***

![Panel Format Visual en PowerBI mostrando opciones de formato](images/format_visual.png)

### Total de Hogares sin Luz

Es una buena pr√°ctica crear las medidas expl√≠citamente, es decir, introducir el c√≥digo de lo que queremos que haga nuestra medida. Para efectos pr√°cticos, utilizaremos la medida impl√≠cita de sumatoria que nos ofrece PowerBi:

- **Seleccionamos una *card* y arrastramos CLIENTES_AFECTADOS a *field***

![Tarjeta de visualizaci√≥n: Total de Hogares sin Luz en PowerBI](images/Total_casas_kpi.png)

### Comparaci√≥n √∫ltima medici√≥n

```m
Comparaci√≥n √∫ltima medici√≥n = 
VAR ultimoTiempo = MAX(clientes_afectados_tiempo_real[TIMESTAMP])
VAR PenultimoTiempo = 
    CALCULATE(MAX(clientes_afectados_tiempo_real[TIMESTAMP]), 
              clientes_afectados_tiempo_real[TIMESTAMP] < ultimoTiempo)

VAR Afectados_Ultima =
    CALCULATE(SUM(clientes_afectados_tiempo_real[CLIENTES_AFECTADOS]), 
              clientes_afectados_tiempo_real[TIMESTAMP] = ultimoTiempo)

VAR Afectados_Anterior =
    CALCULATE(SUM(clientes_afectados_tiempo_real[CLIENTES_AFECTADOS]), 
              clientes_afectados_tiempo_real[TIMESTAMP] = PenultimoTiempo)

RETURN
    Afectados_Ultima - Afectados_Anterior

```

B√°sicamente esta medida crea 4 variables: 

- **ultimoTiempo -> el tiempo m√°s reciente**
- **PenultimoTiempo -> medici√≥n pasada**
- **Afectados_Ultima -> total de hogares afectados m√°s reciente**
- **Afectados_Anterior -> total de hogares afectados de la medici√≥n anterior**

A trav√©s de estas podemos obtener la variaci√≥n nominal de los hogares afectados respecto a la medici√≥n anterior


![Visual comparativa: Diferencia entre la √∫ltima y la pen√∫ltima medici√≥n de clientes afectados](images/Comparacion_ultima.png)

### Porcentaje hogares sin luz

Con esta m√©trica podremos dimensionar la cantidad de hogares sin suministro el√©ctrico a nivel nacional. El total de hogares fue un dato que recog√≠ del  [SEC](https://www.sec.cl/interrupciones-en-linea/?view_full_site=true){target="_blank"}. Si bien no est√° a primera vista, lo encontr√© con el modo desarrollador, espec√≠ficamente en el  m√©todo GetClientesNacional de la api, el cual entrega el n√∫mero total de clientes nacional.

```m
Porcentaje_Hogares_Sin_Luz = 
VAR Total_Hogares = 8156814
VAR Total_Afectados = SUM(clientes_afectados_tiempo_real[Clientes_Afectados])
RETURN 
    DIVIDE(Total_Afectados, Total_Hogares, 0)

```

![Tarjeta de porcentaje: Proporci√≥n de hogares sin suministro el√©ctrico a nivel nacional](images/proporcion_nacional.png)

### Mapa Interactivo

Visitando mi [repositorio](https://github.com/simonkey1/SEC){target="_blank"} puedes descargar el archivo llamado Mapa_Chile.json para visualizar nuestro mapa. Una vez descargado, necesitamos habilitar la opci√≥n de mapas de forma (Shape Map) en nuestro Powerbi:

 -**En la esquina inferior izquierda de la secci√≥n File click en Options and settings y luego Options**
 -**Click en Preview Features y activamos el shape map visual**

![Mapa interactivo de Chile: Visualizaci√≥n de clientes afectados usando Shape Map en PowerBI](images/Shape.png)


Una vez activado lo introducimos con la interfaz gr√°fica seleccionando **Shape map** e introducimos como **Location** nuestra columna **REGION_CORREGIDA** que creamos antes y en **Color saturation** la sumatoria de los clientes afectados. 

![Mapa interactivo de Chile: Visualizaci√≥n de clientes afectados usando Shape Map en PowerBI](images/Mapa1.png)

Nos dirigimos a la pesta√±a **visual** del mapa y en **map type** seleccionamos **Custom map** y en **Add a map type** agregamos nuestro archivo json

![Configuraci√≥n del Shape Map: Importaci√≥n del archivo .topojson y asignaci√≥n de ubicaci√≥n y color en PowerBI](images/mapa2.png)

### Top 3 Comunas

Ya sabes c√≥mo agregar una medida, por lo que te proporciono el c√≥digo para obtener una tarjeta que nos informe en top 3 actual de las comunas con mayor cantidad de hogares afectados. 


```m
TOP3_Comunas = 
VAR ComunasFiltradas =
    FILTER(
        ALL(clientes_afectados_tiempo_real), 
        clientes_afectados_tiempo_real[Region_Corregida] IN VALUES(clientes_afectados_tiempo_real[Region_Corregida])
    )

VAR ComunasGrouped =
    SUMMARIZE(
        ComunasFiltradas, 
        clientes_afectados_tiempo_real[Comuna],
        "@Clientes_Afectados", SUM(clientes_afectados_tiempo_real[Clientes_Afectados])
    )

VAR ComunasRanked =
    TOPN(3, ComunasGrouped, [@Clientes_Afectados], DESC)

RETURN
    CONCATENATEX(ComunasRanked, clientes_afectados_tiempo_real[Comuna], ", ")


```

![Tarjeta informativa: Top 3 comunas con mayor cantidad de hogares afectados](images/TOP_3.png)

### Hogares sin Luz por Regi√≥n

Este gr√°fico se crea con una visual de *Stacked bar chart*. Utilic√© en el eje y las Comunas, en el X la sumatoria de clientes afectados y la leyenda son las empresas el√©ctricas

![Gr√°fico de barras agrupadas: Hogares sin luz por Regi√≥n (con leyenda)](images/stacked_bar.png)

### Hogares sin luz por Regi√≥n

Es una visualizaci√≥n tipo *#Clustered bar chart#* similar al anterior con la diferencia que ahora es por Regiones y sin leyenda

![Gr√°fico de barras: Hogares sin luz por Regi√≥n (sin leyenda)](images/Hogares_region.png)

### Filtro por Regi√≥n

Esta es una elecci√≥n m√≠a, podr√≠as hacer filtros por comunas si deseas, incluso provincias si creas la columna. Lo utilic√© con la interfaz gr√°fica, en la opci√≥n Filtro y en *field* las regiones, no la corregida, ya que son muy largos los nombres.

### Listo!

Felicidades, si llegaste hasta ac√° tienes un dashboard en condiciones, ¬øcierto? Pues no necesariamente. Es funcional, pero requiere de un estilado personalizado para verse m√°s atr√°ctivo y que llame la atenci√≥n. Decid√≠ no hacer un tutorial de esto ya que mi enfoque principal no es hacer un tutorial a fondo de PowerBI. De hecho, no hice grandes cambios, simplemente estandaric√© las fuentes, tama√±os, colores, t√≠tulos y poco m√°s. Te puedo se√±alar que es muy importante que hayan buenos contrastes, que las letras sean legibles y que no hayan tantos colores: menos es m√°s. De todas maneras, podr√°s utilizar mi proyecto como plantilla para estilarlo a tu manera. 

# Conclusiones

A lo largo del tutorial hemos podido ahondar desde la extraccion de los datos con python, a la transformaci√≥n y visualizaci√≥n de estos con powerbi. Me gustar√≠a se√±alar algunos aspectos a considerar del proyecto: 

- **Playwright + pandas:** combinaci√≥n poderosa para extraer los datos y procesarlos, un factor clave para una correcta visualizaci√≥n


- **Powerbi:** es una herramienta capaz de construir dashboards impactantes con un par de clicks y un poco de c√≥digo, lo que es un aspecto positivo para mi experiencia considerando que es mi primera vez us√°ndolo**


- **Powerbi es un software de pago:** la capa gratuita muchas veces nos limita la personalizaci√≥n, escalabilidad del proyecto y procesos de automatizaci√≥n, esto me hizo frenar m√°s ideas que ten√≠a en mente para este proyecto, ya que requer√≠an de una licencia pagada, sin embargo, no niego que siga realizando proyectos con Powerbi debido a su facilidad y versatilidad, de hecho mi siguiente proyecto es utilizando powerbi + postgresql, as√≠ que les invito a estar atentos


- **Dependo de que el SEC funcione:** si se corta la luz y la p√°gina est√° ca√≠da, no podremos monitorear los casos, un aspecto que lamentablemente no puedo solucionar

- **Base de datos hist√≥rica:** si te fijas bien, hemos creado dos bases pero s√≥lo nos hemos quedado con la de tiempo real. Bueno, esto se debe en parte a lo mencionado m√°s arriba sobre los costes, sumado a que si bien son datos parecidos, el enfoque cambia bastante, ya que buscamos patrones en el tiempo y utilizamos otras m√©tricas para poder realizar el an√°lisis, por lo que decid√≠ profundizarlo de manera independiente a este proyecto. A√∫n as√≠, la utilizamos en la medida para comparar respecto a la medici√≥n pasada

- **Futuro del proyecto:** me entusiasma la idea de poder automatizar un sistema de reporte peri√≥dico (horas, minutos, d√≠as , mensuales, etc.) y poder ayudar a la gente a que podamos analizar los contenidos que ya nos presenta la SEC pero con un enfoque m√°s did√°ctico y aterrizado para los usuarios. Es una tarea pendiente que dejo la puerta abierta a las posibilidades**

- **Python para todo:** he pensado que si hago todo esto utilizando python, podr√≠amos escalarlo gratuitamente. Tambi√©n es una idea que tengo pensada a futuro y que puede beneficiar en mayor medida a las personas

Gracias por llegar hasta aqu√≠, cualquier feedback siempre es bienvenido üíú

