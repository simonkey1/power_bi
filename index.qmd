---
title: "‚ö°  An√°lisis en Tiempo Real del Suministro El√©ctrico de Chile ‚ö°"
pubDate: 2025-02-12
description: "Un tutorial de c√≥mo extraer datos con **Playwright**, procesarlos con **Pandas** y visualizar en **PowerBI**."
author: "Simon Gomez"
format: 
  html:
    code-fold: true
    code-overflow: scroll
    theme: cerulean
    toc: True
    
---

## Introducci√≥n

Hace poco descubr√≠ la p√°gina de la Superintendecia de Electricidad y Combustibles (SEC). Me llam√≥ la atenci√≥n en particular su secci√≥n de m√©tricas e informaci√≥n de los cortes de luz a nivel nacional, debido a que not√© que hay un gran margen de mejora en su accesibilidad y visualizaci√≥n de los datos para el usuario.

## ¬øQu√© haremos?

1.  **Preparar nuestro entorno**: primero, instalaremos las dependencias necesarias para el proyecto.

2.  **Extracci√≥n de los datos**: aprenderemos a realizar web scraping con Playwright.

3.  **Transformaci√≥n de los datos**: necesitaremos limpiar y procesar los datos extra√≠dos con Pandas.

4.  **Visualizaci√≥n de los datos**: finalmente, visualizaremos los datos en Powerbi.

## Entorno de Desarrollo

Para este proyecto, necesitaremos instalar las siguientes dependencias: Playwright, Pandas y Powerbi.

Les recomiendo crear un entorno virtual para instalar las dependencias. Para ello, decidan un directorio donde quieran crear el entorno virtual y ejecuten el siguiente comando en la terminal:

``` python

 python -m venv "nombre-del-entorno"-env

```

Una vez creado el entorno virtual, act√≠venlo con el siguiente comando:

``` bash

    source "nombre-del-entorno"-env/bin/activate

```

Ahora, instalemos las dependencias necesarias:

``` bash

    pip install playwright pandas
    
```

## Extracci√≥n de los Datos

Primero, necesitamos importar las librer√≠as necesarias:

``` python

    from playwright.sync_api import sync_playwright
    import pandas as pd
```

# üöÄ Instalar Dependencias

Con el entorno virtual activado, instalemos las librer√≠as necesarias:

``` bash
pip install playwright pandas
```

Adem√°s, debemos instalar los navegadores de Playwright:

``` bash
playwright install
```

------------------------------------------------------------------------

## üîç Extracci√≥n de Datos con Playwright

Usaremos **Playwright** para interceptar las respuestas de la API de la SEC.

### üìå Importaci√≥n de Librer√≠as

``` python
from playwright.sync_api import sync_playwright
import pandas as pd
import os
import time
import re
from datetime import datetime, timedelta
```

------------------------------------------------------------------------

## üìÇ Definici√≥n de Archivos de Salida

Guardaremos los datos en dos archivos CSV:

-   **`clientes_afectados_tiempo_real.csv`**: Contiene los datos m√°s recientes.
-   **`clientes_afectados_historico.csv`**: Mantiene un registro hist√≥rico.

``` python
csv_tiempo_real = "clientes_afectados_tiempo_real.csv"
csv_historico = "clientes_afectados_historico.csv"
```

------------------------------------------------------------------------

# üîé An√°lisis de la Funci√≥n `intercept_responses()`

Esta funci√≥n usa **Playwright** para interceptar las respuestas de la API de la **Superintendencia de Electricidad y Combustibles de Chile (SEC)** y extraer informaci√≥n sobre cortes de luz. Luego, almacena estos datos en archivos CSV.

------------------------------------------------------------------------

## üìå **Estructura General**

1.  **Abrir un navegador en modo headless** (sin interfaz gr√°fica).
2.  **Interceptar las respuestas de la API** en la p√°gina de la SEC.
3.  **Extraer informaci√≥n clave** de los datos JSON recibidos.
4.  **Procesar los datos** para calcular tiempos y crear identificadores √∫nicos.
5.  **Guardar la informaci√≥n en archivos CSV**.
6.  **Cerrar el navegador** una vez completado el proceso.

------------------------------------------------------------------------

## üõ† **Paso a Paso de la Funci√≥n**

### 1Ô∏è‚É£ **Inicializar Playwright y Abrir el Navegador**

Se utiliza `sync_playwright()` para iniciar Playwright y lanzar un navegador **Chromium** en modo **headless** (sin interfaz gr√°fica).

``` python
with sync_playwright() as p:
    browser = p.chromium.launch(headless=True)  # Lanzar navegador en modo headless
    page = browser.new_page()
```

üìå **¬øQu√© hace esto?**

-   Crea una instancia de Playwright.
-   Lanza un navegador Chromium sin interfaz visual.
-   Crea una nueva p√°gina en ese navegador.

------------------------------------------------------------------------

### 2Ô∏è‚É£ **Definir una Lista para Almacenar Registros**

``` python
registros = []  # Lista para almacenar datos nuevos
```

üìå **¬øPara qu√© sirve?**

-   Aqu√≠ se guardar√°n los datos extra√≠dos de la API antes de escribirlos en los archivos CSV.

------------------------------------------------------------------------

### 3Ô∏è‚É£ **Interceptar las Respuestas de la API**

``` python
def handle_response(response):
    if "GetPorFecha" in response.url:
        try:
            data = response.json()
            timestamp_actual = datetime.now()  # Tiempo de consulta
```

üìå **¬øQu√© hace esto?**

-   **Verifica si la URL de la respuesta contiene `"GetPorFecha"`**, lo que indica que es una respuesta de la API relevante.
-   **Convierte la respuesta en JSON** (`response.json()`).
-   **Guarda el timestamp actual** para identificar cu√°ndo se hizo la consulta.

------------------------------------------------------------------------

### 4Ô∏è‚É£ **Procesar los Datos Extra√≠dos**

``` python
for entry in data:
    actualizado_hace = entry.get("ACTUALIZADO_HACE", "")
    minutos_atras = 0

    match = re.search(r'(\d+)\s+Minutos', actualizado_hace)
    if match:
        minutos_atras = int(match.group(1))  # Extrae el n√∫mero antes de "Minutos"

    hora_exacta_reporte = timestamp_actual - timedelta(minutes=minutos_atras)
```

üìå **¬øQu√© hace esto?**

-   **Extrae el campo `"ACTUALIZADO_HACE"`**, que indica hace cu√°nto tiempo se actualiz√≥ la informaci√≥n.
-   **Usa una expresi√≥n regular (`re.search`) para extraer los minutos** mencionados en `"ACTUALIZADO_HACE"`.
-   **Calcula la hora exacta del reporte**, restando esos minutos del timestamp actual.

------------------------------------------------------------------------

### 5Ô∏è‚É£ **Crear un Identificador √önico para Cada Registro**

``` python
unique_id = f"{entry.get('FECHA_INT_STR', '')}-{entry.get('REGION', '')}-{entry.get('COMUNA', '')}-{entry.get('EMPRESA', '')}-{entry.get('CLIENTES_AFECTADOS', 0)}-{hora_exacta_reporte.strftime('%Y-%m-%d %H:%M:%S')}"
```

üìå **¬øPor qu√© es importante esto?**

-   **Evita la duplicaci√≥n de datos**, asegurando que cada registro tenga un ID √∫nico.
-   **Facilita la organizaci√≥n** en los archivos CSV.

------------------------------------------------------------------------

### 6Ô∏è‚É£ **Guardar los Datos en la Lista `registros`**

``` python
registros.append({
    "ID_UNICO": unique_id,
    "TIMESTAMP": timestamp_actual.strftime("%Y-%m-%d %H:%M:%S"),
    "HORA_EXACTA_REPORTE": hora_exacta_reporte.strftime("%Y-%m-%d %H:%M:%S"),
    "FECHA": entry.get("FECHA_INT_STR", ""),
    "REGION": entry.get("NOMBRE_REGION", ""),
    "COMUNA": entry.get("NOMBRE_COMUNA", ""),
    "EMPRESA": entry.get("NOMBRE_EMPRESA", ""),
    "CLIENTES_AFECTADOS": entry.get("CLIENTES_AFECTADOS", 0),
    "ACTUALIZADO_HACE": actualizado_hace
})
```

üìå **¬øQu√© hace esto?**

-   **Guarda cada registro como un diccionario** dentro de la lista `registros`.
-   **Almacena los datos clave** como fecha, regi√≥n, comuna, empresa y clientes afectados.

------------------------------------------------------------------------

### 7Ô∏è‚É£ **Capturar las Respuestas de la API**

``` python
page.on("response", handle_response)
```

üìå **¬øQu√© hace esto?**

-   **Asocia la funci√≥n `handle_response` con cada respuesta de la p√°gina**.
-   **Intercepta las respuestas en segundo plano** mientras se carga la web.

------------------------------------------------------------------------

### 8Ô∏è‚É£ **Acceder a la P√°gina de la SEC**

``` python
page.goto("https://apps.sec.cl/INTONLINEv1/index.aspx")
page.wait_for_timeout(5000)  # Espera para capturar datos
```

üìå **¬øQu√© hace esto?**

-   **Abre la p√°gina de la SEC en el navegador**.
-   **Espera 5 segundos** para permitir la carga de datos.

------------------------------------------------------------------------

### 9Ô∏è‚É£ **Cerrar el Navegador**

``` python
browser.close()
```

üìå **¬øPor qu√© es importante?**

-   **Libera recursos del sistema**.
-   **Evita que el script consuma demasiada memoria**.

------------------------------------------------------------------------

## üìä **Guardado de Datos en CSV**

``` python
if registros:
    df_new = pd.DataFrame(registros)

    # üìå Guardar en CSV hist√≥rico
    if os.path.exists(csv_historico):
        df_historico = pd.read_csv(csv_historico, encoding="utf-8-sig")
        df_historico = pd.concat([df_historico, df_new]).drop_duplicates(subset=["ID_UNICO"], keep="first")
    else:
        df_historico = df_new

    df_historico.to_csv(csv_historico, index=False, encoding="utf-8-sig")

    # üìå Guardar en CSV de Tiempo Real
    df_new.to_csv(csv_tiempo_real, index=False, encoding="utf-8-sig")

    print(f"‚úÖ Datos guardados en:\nüìå {csv_historico} (Hist√≥rico)\nüìå {csv_tiempo_real} (Tiempo Real)")
```

üìå **¬øQu√© hace esto?**

-   **Convierte los registros en un DataFrame de Pandas**.
-   **Guarda los datos en CSV hist√≥rico y de tiempo real**.
-   **Evita duplicados bas√°ndose en el ID √∫nico**.

------------------------------------------------------------------------

## üîÅ **Automatizaci√≥n Cada 5 Minutos**

``` python
while True:
    intercept_responses()
    print("‚è≥ Esperando 5 minutos para la siguiente ejecuci√≥n...\n")
    time.sleep(5 * 60)  # 5 minutos en segundos
```

üìå **¬øQu√© hace esto?**

-   **Ejecuta `intercept_responses()` en un bucle infinito**.
-   **Espera 5 minutos (`time.sleep(5 * 60)`) antes de volver a ejecutar la funci√≥n**.

## **Felicidades‚≠ê!**
Ya tenemos nuestra base de datos casi lista para su visualizaci√≥n. Si bien podr√≠amos terminar de darle formato a los datos directamente con pandas, es una perfecta ocasi√≥n para hacerlo en powerbi, ya que podremos visualizar con facilidad los cambios que iremos realizando para construir nuestro dashboard interactivo. 

## **Aclaraci√≥n üî¥**
Este no es un tutorial de c√≥mo utilizar PowerBI, por lo que es necesario saber lo b√°sico para poder seguir el tutorial: instalaci√≥n, configuraci√≥n, comandos, etc. 

## **Powerbi: carga de datos **
Dependiendo de la carpeta donde hayamos realizado nuestro proyecto, podremos encontrar el archivo resultante, el cual utilizaremos ahora.

Para poder manipular nuestros datos en Powerbi hay que seguir unos pasos sencillos:

- **Abrir PowerBI**
- **Click en Get data from other sources**
- **Seleccionamos Text/CSV**
- **Buscamos nuestro archivo .csv**
- **


